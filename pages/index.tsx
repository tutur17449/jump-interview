import { useState } from "react";
import { BeerCard, BeerItemLink } from "@/components";
import { getBeers, getRandomBeers } from "@/services/beers";
import { css } from "@/stitches.config";
import { useQuery } from "@tanstack/react-query";
import Head from "next/head";
import { useDebounced } from "@/hooks/useDebounced";
import { GetServerSideProps } from "next";
import { motion } from "framer-motion";
import { containerVariant } from "@/utils/framer";

export interface HomeProps {
  beers: Awaited<ReturnType<typeof getBeers>>;
  randomBeers: Awaited<ReturnType<typeof getRandomBeers>>;
}

export const getServerSideProps: GetServerSideProps<HomeProps> = async () => {
  const [beers, randomBeers] = await Promise.all([
    getBeers(),
    getRandomBeers(),
  ]);

  return { props: { beers, randomBeers } };
};

export default function Home(props: HomeProps) {
  const [search, setSearch] = useState("");
  const debouncedSearch = useDebounced(search, 300);

  const { data: beers } = useQuery({
    queryKey: ["beers", debouncedSearch],
    queryFn: () => getBeers(debouncedSearch),
    initialData: props.beers,
  });

  const { data: randomBeers } = useQuery({
    queryKey: ["randomBeers"],
    queryFn: getRandomBeers,
    initialData: props.randomBeers,
    refetchInterval: 10000,
    staleTime: 10000,
  });

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <motion.div
        className={cardsWrapperStyle()}
        initial="hidden"
        animate="show"
        variants={containerVariant}
      >
        {randomBeers.map((b) => (
          <BeerCard key={b.id} beer={b} />
        ))}
      </motion.div>
      <hr />
      <input
        type="text"
        onChange={(e) => setSearch(e.target.value)}
        placeholder="Search beer..."
        className={searchStyle()}
      />
      <motion.div
        className={linksWrapperStyle()}
        initial="hidden"
        animate="show"
        variants={containerVariant}
      >
        {beers.map((b) => (
          <BeerItemLink key={b.id} beer={b} />
        ))}
      </motion.div>
    </>
  );
}

const linksWrapperStyle = css({
  display: "flex",
  flexDirection: "column",
});

const searchStyle = css({
  width: "100%",
  padding: ".5rem",
});

const cardsWrapperStyle = css({
  display: "grid",
  gridAutoFlow: "column",
  gridTemplateColumns: "repeat(2, 1fr)",
  gap: "1rem",
});
